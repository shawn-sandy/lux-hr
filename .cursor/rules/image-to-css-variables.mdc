---
description: Analyze attached images and generate CSS/SCSS variables and utility classes for colors, fonts, spacing, dimensions, and other design tokens
globs: **/*.css,**/*.scss,**/*.sass,**/*.less
alwaysApply: false
---

# Image to CSS Variables & Utilities Rule

When analyzing an attached image to extract design tokens and create CSS/SCSS variables and utility classes, follow these comprehensive guidelines:

## Color Analysis
- Extract all colors from the image including:
  - Primary, secondary, and accent colors
  - Background colors and gradients
  - Text colors (dark/light variants)
  - Border and divider colors
  - State colors (hover, active, disabled)
  - Semantic colors (success, warning, error, info)

## Color Scales Generation
When identifying primary and secondary colors, generate complete color scales with tints and shades for each:

### Primary Color Scale
Generate 9-11 variations of the primary color (50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950):
```scss
// Primary color scale (example with blue)
$color-primary-50: #eff6ff;   // Lightest tint
$color-primary-100: #dbeafe;  // Very light tint
$color-primary-200: #bfdbfe;  // Light tint
$color-primary-300: #93c5fd;  // Medium light tint
$color-primary-400: #60a5fa;  // Light
$color-primary-500: #3b82f6;  // Base primary color
$color-primary-600: #2563eb;  // Medium dark
$color-primary-700: #1d4ed8;  // Dark
$color-primary-800: #1e40af;  // Very dark
$color-primary-900: #1e3a8a;  // Darkest shade
$color-primary-950: #172554;  // Deepest shade

// Convenience aliases
$color-primary: $color-primary-500;
$color-primary-light: $color-primary-400;
$color-primary-dark: $color-primary-600;
```

### Secondary Color Scale
Generate matching scale for secondary color:
```scss
// Secondary color scale (example with gray)
$color-secondary-50: #f9fafb;
$color-secondary-100: #f3f4f6;
$color-secondary-200: #e5e7eb;
$color-secondary-300: #d1d5db;
$color-secondary-400: #9ca3af;
$color-secondary-500: #6b7280;  // Base secondary color
$color-secondary-600: #4b5563;
$color-secondary-700: #374151;
$color-secondary-800: #1f2937;
$color-secondary-900: #111827;
$color-secondary-950: #030712;

// Convenience aliases
$color-secondary: $color-secondary-500;
$color-secondary-light: $color-secondary-400;
$color-secondary-dark: $color-secondary-600;
```

### Accent Color Scale
For accent colors, generate a similar scale:
```scss
// Accent color scale (example with amber)
$color-accent-50: #fffbeb;
$color-accent-100: #fef3c7;
$color-accent-200: #fde68a;
$color-accent-300: #fcd34d;
$color-accent-400: #fbbf24;
$color-accent-500: #f59e0b;   // Base accent color
$color-accent-600: #d97706;
$color-accent-700: #b45309;
$color-accent-800: #92400e;
$color-accent-900: #78350f;
$color-accent-950: #451a03;

// Convenience aliases
$color-accent: $color-accent-500;
$color-accent-light: $color-accent-400;
$color-accent-dark: $color-accent-600;
```

### Color Scale Utility Classes
Generate concise but semantic utility classes for each step in the color scales:
```scss
// Primary color backgrounds
.bg-primary-lightest { background-color: $color-primary-50; }
.bg-primary-lighter { background-color: $color-primary-100; }
.bg-primary-light { background-color: $color-primary-200; }
.bg-primary { background-color: $color-primary-500; }
.bg-primary-dark { background-color: $color-primary-700; }
.bg-primary-darker { background-color: $color-primary-800; }
.bg-primary-darkest { background-color: $color-primary-900; }

// Primary text colors
.text-primary-lightest { color: $color-primary-50; }
.text-primary-lighter { color: $color-primary-100; }
.text-primary-light { color: $color-primary-200; }
.text-primary { color: $color-primary-500; }
.text-primary-dark { color: $color-primary-700; }
.text-primary-darker { color: $color-primary-800; }
.text-primary-darkest { color: $color-primary-900; }

// Primary border colors
.border-primary-lightest { border-color: $color-primary-50; }
.border-primary-lighter { border-color: $color-primary-100; }
.border-primary-light { border-color: $color-primary-200; }
.border-primary { border-color: $color-primary-500; }
.border-primary-dark { border-color: $color-primary-700; }
.border-primary-darker { border-color: $color-primary-800; }
.border-primary-darkest { border-color: $color-primary-900; }

// Secondary color variants
.bg-secondary-lightest { background-color: $color-secondary-50; }
.bg-secondary-light { background-color: $color-secondary-200; }
.bg-secondary { background-color: $color-secondary-500; }
.bg-secondary-dark { background-color: $color-secondary-700; }
.bg-secondary-darkest { background-color: $color-secondary-900; }

// Accent color variants
.bg-accent-light { background-color: $color-accent-200; }
.bg-accent { background-color: $color-accent-500; }
.bg-accent-dark { background-color: $color-accent-700; }

// Semantic color classes
.bg-success { background-color: $color-success; }
.bg-warning { background-color: $color-warning; }
.bg-error { background-color: $color-error; }
.bg-info { background-color: $color-info; }

.text-success { color: $color-success; }
.text-warning { color: $color-warning; }
.text-error { color: $color-error; }
.text-info { color: $color-info; }
```

### Color Scale SCSS Mixin
Create a mixin to generate color scales automatically:
```scss
@mixin generate-color-scale($name, $base-color) {
  // Generate tints (lighter versions)
  #{$name}-50: mix(white, $base-color, 95%);
  #{$name}-100: mix(white, $base-color, 90%);
  #{$name}-200: mix(white, $base-color, 75%);
  #{$name}-300: mix(white, $base-color, 60%);
  #{$name}-400: mix(white, $base-color, 30%);
  #{$name}-500: $base-color; // Base color
  
  // Generate shades (darker versions)
  #{$name}-600: mix(black, $base-color, 20%);
  #{$name}-700: mix(black, $base-color, 40%);
  #{$name}-800: mix(black, $base-color, 60%);
  #{$name}-900: mix(black, $base-color, 75%);
  #{$name}-950: mix(black, $base-color, 90%);
}

// Usage example:
$colors: ();
$colors: map-merge($colors, (
  @include generate-color-scale('primary', #3b82f6),
  @include generate-color-scale('secondary', #6b7280),
  @include generate-color-scale('accent', #f59e0b)
));
```

### CSS Custom Properties for Color Scales
Generate CSS custom properties for the color scales:
```css
:root {
  /* Primary color scale */
  --color-primary-50: #eff6ff;
  --color-primary-100: #dbeafe;
  --color-primary-200: #bfdbfe;
  --color-primary-300: #93c5fd;
  --color-primary-400: #60a5fa;
  --color-primary-500: #3b82f6;
  --color-primary-600: #2563eb;
  --color-primary-700: #1d4ed8;
  --color-primary-800: #1e40af;
  --color-primary-900: #1e3a8a;
  --color-primary-950: #172554;
  
  /* Secondary color scale */
  --color-secondary-50: #f9fafb;
  --color-secondary-100: #f3f4f6;
  --color-secondary-200: #e5e7eb;
  --color-secondary-300: #d1d5db;
  --color-secondary-400: #9ca3af;
  --color-secondary-500: #6b7280;
  --color-secondary-600: #4b5563;
  --color-secondary-700: #374151;
  --color-secondary-800: #1f2937;
  --color-secondary-900: #111827;
  --color-secondary-950: #030712;
  
  /* Accent color scale */
  --color-accent-50: #fffbeb;
  --color-accent-100: #fef3c7;
  --color-accent-200: #fde68a;
  --color-accent-300: #fcd34d;
  --color-accent-400: #fbbf24;
  --color-accent-500: #f59e0b;
  --color-accent-600: #d97706;
  --color-accent-700: #b45309;
  --color-accent-800: #92400e;
  --color-accent-900: #78350f;
  --color-accent-950: #451a03;
  
  /* Semantic Colors */
  --color-success-50: #f0fdf4;
  --color-success-500: #10b981;
  --color-success-900: #14532d;
  --color-warning-50: #fffbeb;
  --color-warning-500: #f59e0b;
  --color-warning-900: #78350f;
  --color-error-50: #fef2f2;
  --color-error-500: #ef4444;
  --color-error-900: #7f1d1d;
  --color-info-50: #eff6ff;
  --color-info-500: #3b82f6;
  --color-info-900: #1e3a8a;
  
  /* Typography */
  --font-family-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  --font-family-secondary: 'Roboto Mono', 'Courier New', monospace;
  --font-family-display: 'Playfair Display', Georgia, serif;
  
  --font-weight-thin: 100;
  --font-weight-light: 300;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  --font-weight-extrabold: 800;
  --font-weight-black: 900;
  
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  --font-size-5xl: 3rem;
  
  --line-height-tight: 1.25;
  --line-height-snug: 1.375;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.625;
  --line-height-loose: 2;
  
  --letter-spacing-tighter: -0.05em;
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
  --letter-spacing-wider: 0.05em;
  --letter-spacing-widest: 0.1em;
  
  /* Spacing Scale */
  --spacing-0: 0;
  --spacing-1: 0.25rem;
  --spacing-2: 0.5rem;
  --spacing-3: 0.75rem;
  --spacing-4: 1rem;
  --spacing-5: 1.25rem;
  --spacing-6: 1.5rem;
  --spacing-8: 2rem;
  --spacing-10: 2.5rem;
  --spacing-12: 3rem;
  --spacing-16: 4rem;
  --spacing-20: 5rem;
  --spacing-24: 6rem;
  --spacing-32: 8rem;
  --spacing-40: 10rem;
  --spacing-48: 12rem;
  --spacing-56: 14rem;
  --spacing-64: 16rem;
  
  /* Sizing */
  --width-auto: auto;
  --width-full: 100%;
  --width-screen: 100vw;
  --width-min: min-content;
  --width-max: max-content;
  --width-fit: fit-content;
  
  --height-auto: auto;
  --height-full: 100%;
  --height-screen: 100vh;
  
  /* Container Max Widths */
  --container-sm: 640px;
  --container-md: 768px;
  --container-lg: 1024px;
  --container-xl: 1280px;
  --container-2xl: 1536px;
  
  /* Border Radius */
  --border-radius-none: 0;
  --border-radius-sm: 0.125rem;
  --border-radius-base: 0.25rem;
  --border-radius-md: 0.375rem;
  --border-radius-lg: 0.5rem;
  --border-radius-xl: 0.75rem;
  --border-radius-2xl: 1rem;
  --border-radius-3xl: 1.5rem;
  --border-radius-full: 9999px;
  
  /* Border Widths */
  --border-width-0: 0;
  --border-width-1: 1px;
  --border-width-2: 2px;
  --border-width-4: 4px;
  --border-width-8: 8px;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-base: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  --shadow-inner: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
  --shadow-none: none;
  
  /* Opacity */
  --opacity-0: 0;
  --opacity-5: 0.05;
  --opacity-10: 0.1;
  --opacity-20: 0.2;
  --opacity-25: 0.25;
  --opacity-30: 0.3;
  --opacity-40: 0.4;
  --opacity-50: 0.5;
  --opacity-60: 0.6;
  --opacity-70: 0.7;
  --opacity-75: 0.75;
  --opacity-80: 0.8;
  --opacity-90: 0.9;
  --opacity-95: 0.95;
  --opacity-100: 1;
  
  /* Z-Index */
  --z-index-0: 0;
  --z-index-10: 10;
  --z-index-20: 20;
  --z-index-30: 30;
  --z-index-40: 40;
  --z-index-50: 50;
  --z-index-auto: auto;
  
  /* Breakpoints */
  --breakpoint-sm: 640px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 1024px;
  --breakpoint-xl: 1280px;
  --breakpoint-2xl: 1536px;
  
  /* Convenience Aliases */
  --color-primary: var(--color-primary-500);
  --color-primary-light: var(--color-primary-400);
  --color-primary-dark: var(--color-primary-600);
  --color-secondary: var(--color-secondary-500);
  --color-secondary-light: var(--color-secondary-400);
  --color-secondary-dark: var(--color-secondary-600);
  --color-accent: var(--color-accent-500);
  --color-accent-light: var(--color-accent-400);
  --color-accent-dark: var(--color-accent-600);
  
  --text-primary: var(--color-secondary-900);
  --text-secondary: var(--color-secondary-600);
  --text-muted: var(--color-secondary-400);
  --text-inverse: var(--color-primary-50);
}
```

### CSS Utility Classes
Generate concise but meaningful utility classes using CSS custom properties:

```css
/* utilities.css - Concise Utility Classes */

/* Color Utilities */
.bg-primary { background-color: var(--color-primary); }
.bg-primary-light { background-color: var(--color-primary-light); }
.bg-primary-dark { background-color: var(--color-primary-dark); }
.bg-secondary { background-color: var(--color-secondary); }
.bg-accent { background-color: var(--color-accent); }

/* Primary Color Scale Backgrounds */
.bg-primary-lightest { background-color: var(--color-primary-50); }
.bg-primary-lighter { background-color: var(--color-primary-100); }
.bg-primary-light { background-color: var(--color-primary-200); }
.bg-primary { background-color: var(--color-primary-500); }
.bg-primary-dark { background-color: var(--color-primary-700); }
.bg-primary-darker { background-color: var(--color-primary-800); }
.bg-primary-darkest { background-color: var(--color-primary-900); }

/* Text Colors */
.text-primary { color: var(--text-primary); }
.text-secondary { color: var(--text-secondary); }
.text-muted { color: var(--text-muted); }
.text-inverse { color: var(--text-inverse); }

/* Primary Color Scale Text */
.text-primary-lightest { color: var(--color-primary-50); }
.text-primary-lighter { color: var(--color-primary-100); }
.text-primary-light { color: var(--color-primary-200); }
.text-primary { color: var(--color-primary-500); }
.text-primary-dark { color: var(--color-primary-700); }
.text-primary-darker { color: var(--color-primary-800); }
.text-primary-darkest { color: var(--color-primary-900); }

/* Typography Utilities */
.font-primary { font-family: var(--font-family-primary); }
.font-secondary { font-family: var(--font-family-secondary); }
.font-display { font-family: var(--font-family-display); }

.font-thin { font-weight: var(--font-weight-thin); }
.font-light { font-weight: var(--font-weight-light); }
.font-normal { font-weight: var(--font-weight-normal); }
.font-medium { font-weight: var(--font-weight-medium); }
.font-semibold { font-weight: var(--font-weight-semibold); }
.font-bold { font-weight: var(--font-weight-bold); }

.text-caption { font-size: var(--font-size-xs); }
.text-small { font-size: var(--font-size-sm); }
.text-body { font-size: var(--font-size-base); }
.text-large { font-size: var(--font-size-lg); }
.text-h6 { font-size: var(--font-size-xl); }
.text-h5 { font-size: var(--font-size-2xl); }
.text-h4 { font-size: var(--font-size-3xl); }
.text-h3 { font-size: var(--font-size-4xl); }
.text-h2 { font-size: var(--font-size-5xl); }

/* Spacing Utilities */
.m-none { margin: var(--spacing-0); }
.m-sm { margin: var(--spacing-2); }
.m-md { margin: var(--spacing-4); }
.m-lg { margin: var(--spacing-6); }
.m-xl { margin: var(--spacing-8); }

.p-none { padding: var(--spacing-0); }
.p-sm { padding: var(--spacing-2); }
.p-md { padding: var(--spacing-4); }
.p-lg { padding: var(--spacing-6); }
.p-xl { padding: var(--spacing-8); }

/* Layout Utilities */
.block { display: block; }
.inline-block { display: inline-block; }
.inline { display: inline; }
.flex { display: flex; }
.inline-flex { display: inline-flex; }
.grid { display: grid; }
.hidden { display: none; }

.static { position: static; }
.fixed { position: fixed; }
.absolute { position: absolute; }
.relative { position: relative; }
.sticky { position: sticky; }

/* Border Utilities */
.rounded-none { border-radius: var(--border-radius-none); }
.rounded-sm { border-radius: var(--border-radius-sm); }
.rounded { border-radius: var(--border-radius-base); }
.rounded-md { border-radius: var(--border-radius-md); }
.rounded-lg { border-radius: var(--border-radius-lg); }
.rounded-xl { border-radius: var(--border-radius-xl); }
.rounded-2xl { border-radius: var(--border-radius-2xl); }
.rounded-full { border-radius: var(--border-radius-full); }

.border-none { border-width: var(--border-width-0); }
.border-thin { border-width: var(--border-width-1); }
.border { border-width: var(--border-width-2); }
.border-thick { border-width: var(--border-width-4); }

/* Shadow Utilities */
.shadow-sm { box-shadow: var(--shadow-sm); }
.shadow { box-shadow: var(--shadow-base); }
.shadow-md { box-shadow: var(--shadow-md); }
.shadow-lg { box-shadow: var(--shadow-lg); }
.shadow-xl { box-shadow: var(--shadow-xl); }
.shadow-2xl { box-shadow: var(--shadow-2xl); }
.shadow-inner { box-shadow: var(--shadow-inner); }
.shadow-none { box-shadow: var(--shadow-none); }

/* Opacity Utilities */
.opacity-0 { opacity: var(--opacity-0); }
.opacity-10 { opacity: var(--opacity-10); }
.opacity-25 { opacity: var(--opacity-25); }
.opacity-50 { opacity: var(--opacity-50); }
.opacity-75 { opacity: var(--opacity-75); }
.opacity-100 { opacity: var(--opacity-100); }
```

### Responsive CSS Utilities
Generate responsive variants using concise breakpoint names:

```css
/* responsive.css - Responsive Utilities */

/* Tablet and up */
@media (min-width: 640px) {
  .sm-block { display: block; }
  .sm-hidden { display: none; }
  .sm-flex { display: flex; }
  .sm-grid { display: grid; }
  
  .sm-text-small { font-size: var(--font-size-sm); }
  .sm-text-body { font-size: var(--font-size-base); }
  .sm-text-large { font-size: var(--font-size-lg); }
  
  .sm-m-none { margin: var(--spacing-0); }
  .sm-m-sm { margin: var(--spacing-2); }
  .sm-m-md { margin: var(--spacing-4); }
  
  .sm-p-none { padding: var(--spacing-0); }
  .sm-p-sm { padding: var(--spacing-2); }
  .sm-p-md { padding: var(--spacing-4); }
}

/* Desktop and up */
@media (min-width: 768px) {
  .md-block { display: block; }
  .md-hidden { display: none; }
  .md-flex { display: flex; }
  .md-grid { display: grid; }
  
  .md-text-body { font-size: var(--font-size-base); }
  .md-text-large { font-size: var(--font-size-lg); }
  .md-text-h6 { font-size: var(--font-size-xl); }
  .md-text-h5 { font-size: var(--font-size-2xl); }
  
  .md-m-none { margin: var(--spacing-0); }
  .md-m-sm { margin: var(--spacing-2); }
  .md-m-md { margin: var(--spacing-4); }
  
  .md-p-none { padding: var(--spacing-0); }
  .md-p-sm { padding: var(--spacing-2); }
  .md-p-md { padding: var(--spacing-4); }
}

/* Large desktop and up */
@media (min-width: 1024px) {
  .lg-block { display: block; }
  .lg-hidden { display: none; }
  .lg-flex { display: flex; }
  .lg-grid { display: grid; }
  
  .lg-text-large { font-size: var(--font-size-lg); }
  .lg-text-h6 { font-size: var(--font-size-xl); }
  .lg-text-h5 { font-size: var(--font-size-2xl); }
  .lg-text-h4 { font-size: var(--font-size-3xl); }
  
  .lg-m-none { margin: var(--spacing-0); }
  .lg-m-sm { margin: var(--spacing-2); }
  .lg-m-md { margin: var(--spacing-4); }
  
  .lg-p-none { padding: var(--spacing-0); }
  .lg-p-sm { padding: var(--spacing-2); }
  .lg-p-md { padding: var(--spacing-4); }
}
```

### CSS File Organization
Generate this file structure for pure CSS:
```
css/
├── variables.css           // All CSS custom properties
├── utilities/
│   ├── colors.css         // Color utility classes
│   ├── typography.css     // Typography utilities
│   ├── spacing.css        // Spacing utilities
│   ├── layout.css         // Layout utilities
│   ├── borders.css        // Border utilities
│   ├── effects.css        // Shadow/effect utilities
│   └── responsive.css     // Responsive variants
├── base/
│   ├── reset.css          // CSS reset
│   └── typography.css     // Base typography
└── main.css              // Main import file
```

### CSS vs SCSS Benefits
**CSS Advantages:**
- No build process required
- Better browser DevTools support for CSS variables
- Runtime manipulation of values
- Better performance (no compilation step)
- Universal compatibility

**SCSS Advantages:**
- Mixins and functions for complex logic
- Variable scoping and manipulation
- Mathematical operations
- Better organization with partials
- More powerful color functions

**Best Practice:** Generate both versions to support different project requirements and allow teams to choose their preferred approach.

## Typography Analysis
- Identify font families, weights, and styles
- Extract font sizes and line heights
- Determine heading hierarchy (h1-h6)
- Note letter spacing and text transforms

### Typography Variables
```scss
// Font families
$font-primary: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
$font-secondary: 'Roboto Mono', 'Courier New', monospace;
$font-display: 'Playfair Display', Georgia, serif;

// Font weights
$font-weight-thin: 100;
$font-weight-light: 300;
$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;
$font-weight-bold: 700;
$font-weight-extrabold: 800;
$font-weight-black: 900;

// Font sizes
$font-size-xs: 0.75rem;    // 12px
$font-size-sm: 0.875rem;   // 14px
$font-size-base: 1rem;     // 16px
$font-size-lg: 1.125rem;   // 18px
$font-size-xl: 1.25rem;    // 20px
$font-size-2xl: 1.5rem;    // 24px
$font-size-3xl: 1.875rem;  // 30px
$font-size-4xl: 2.25rem;   // 36px
$font-size-5xl: 3rem;      // 48px

// Line heights
$line-height-tight: 1.25;
$line-height-snug: 1.375;
$line-height-normal: 1.5;
$line-height-relaxed: 1.625;
$line-height-loose: 2;

// Letter spacing
$letter-spacing-tighter: -0.05em;
$letter-spacing-tight: -0.025em;
$letter-spacing-normal: 0;
$letter-spacing-wide: 0.025em;
$letter-spacing-wider: 0.05em;
$letter-spacing-widest: 0.1em;
```

### Typography Utility Classes
```scss
// Font families
.font-primary { font-family: $font-primary; }
.font-secondary { font-family: $font-secondary; }
.font-display { font-family: $font-display; }

// Font weights
.font-thin { font-weight: $font-weight-thin; }
.font-light { font-weight: $font-weight-light; }
.font-normal { font-weight: $font-weight-normal; }
.font-medium { font-weight: $font-weight-medium; }
.font-semibold { font-weight: $font-weight-semibold; }
.font-bold { font-weight: $font-weight-bold; }

// Font sizes with semantic names
.text-caption { font-size: $font-size-xs; }
.text-small { font-size: $font-size-sm; }
.text-body { font-size: $font-size-base; }
.text-large { font-size: $font-size-lg; }
.text-h6 { font-size: $font-size-xl; }
.text-h5 { font-size: $font-size-2xl; }
.text-h4 { font-size: $font-size-3xl; }
.text-h3 { font-size: $font-size-4xl; }
.text-h2 { font-size: $font-size-5xl; }

// Text alignment
.text-left { text-align: left; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-justify { text-align: justify; }
```

## Spacing Analysis
- Measure margins and padding
- Identify consistent spacing patterns
- Extract gap values for flexbox/grid layouts

### Spacing Variables
```scss
// Spacing scale (based on 4px grid)
$spacing-0: 0;
$spacing-1: 0.25rem;   // 4px
$spacing-2: 0.5rem;    // 8px
$spacing-3: 0.75rem;   // 12px
$spacing-4: 1rem;      // 16px
$spacing-5: 1.25rem;   // 20px
$spacing-6: 1.5rem;    // 24px
$spacing-8: 2rem;      // 32px
$spacing-10: 2.5rem;   // 40px
$spacing-12: 3rem;     // 48px
$spacing-16: 4rem;     // 64px
$spacing-20: 5rem;     // 80px
$spacing-24: 6rem;     // 96px
$spacing-32: 8rem;     // 128px
$spacing-40: 10rem;    // 160px
$spacing-48: 12rem;    // 192px
$spacing-56: 14rem;    // 224px
$spacing-64: 16rem;    // 256px
```

### Spacing Utility Classes
```scss
// Margin utilities with shorter names
.m-none { margin: $spacing-0; }
.m-sm { margin: $spacing-2; }
.m-md { margin: $spacing-4; }
.m-lg { margin: $spacing-6; }
.m-xl { margin: $spacing-8; }

// Specific margin directions
.mt-sm { margin-top: $spacing-2; }
.mt-md { margin-top: $spacing-4; }
.mt-lg { margin-top: $spacing-6; }
.mb-sm { margin-bottom: $spacing-2; }
.mb-md { margin-bottom: $spacing-4; }
.mb-lg { margin-bottom: $spacing-6; }
.ml-sm { margin-left: $spacing-2; }
.ml-md { margin-left: $spacing-4; }
.mr-sm { margin-right: $spacing-2; }
.mr-md { margin-right: $spacing-4; }

// Margin horizontal/vertical short classes
.mx-sm { margin-left: $spacing-2; margin-right: $spacing-2; }
.mx-md { margin-left: $spacing-4; margin-right: $spacing-4; }
.my-sm { margin-top: $spacing-2; margin-bottom: $spacing-2; }
.my-md { margin-top: $spacing-4; margin-bottom: $spacing-4; }

// Padding utilities with shorter names
.p-none { padding: $spacing-0; }
.p-sm { padding: $spacing-2; }
.p-md { padding: $spacing-4; }
.p-lg { padding: $spacing-6; }
.p-xl { padding: $spacing-8; }

// Specific padding directions
.pt-sm { padding-top: $spacing-2; }
.pt-md { padding-top: $spacing-4; }
.pt-lg { padding-top: $spacing-6; }
.pb-sm { padding-bottom: $spacing-2; }
.pb-md { padding-bottom: $spacing-4; }
.pb-lg { padding-bottom: $spacing-6; }
.pl-sm { padding-left: $spacing-2; }
.pl-md { padding-left: $spacing-4; }
.pr-sm { padding-right: $spacing-2; }
.pr-md { padding-right: $spacing-4; }

// Padding horizontal/vertical short classes
.px-sm { padding-left: $spacing-2; padding-right: $spacing-2; }
.px-md { padding-left: $spacing-4; padding-right: $spacing-4; }
.py-sm { padding-top: $spacing-2; padding-bottom: $spacing-2; }
.py-md { padding-top: $spacing-4; padding-bottom: $spacing-4; }
```

## Size & Dimension Analysis
- Extract width and height values
- Identify container max-widths
- Note responsive breakpoints
- Measure border radius values

### Size Variables
```scss
// Widths
$width-auto: auto;
$width-full: 100%;
$width-screen: 100vw;
$width-min: min-content;
$width-max: max-content;
$width-fit: fit-content;

// Fixed widths
$width-0: 0;
$width-1: 0.25rem;
$width-2: 0.5rem;
$width-3: 0.75rem;
$width-4: 1rem;
$width-5: 1.25rem;
$width-6: 1.5rem;
$width-8: 2rem;
$width-10: 2.5rem;
$width-12: 3rem;
$width-16: 4rem;
$width-20: 5rem;
$width-24: 6rem;
$width-32: 8rem;
$width-40: 10rem;
$width-48: 12rem;
$width-56: 14rem;
$width-64: 16rem;
$width-72: 18rem;
$width-80: 20rem;
$width-96: 24rem;

// Container max-widths
$container-sm: 640px;
$container-md: 768px;
$container-lg: 1024px;
$container-xl: 1280px;
$container-2xl: 1536px;

// Border radius
$border-radius-none: 0;
$border-radius-sm: 0.125rem;
$border-radius-base: 0.25rem;
$border-radius-md: 0.375rem;
$border-radius-lg: 0.5rem;
$border-radius-xl: 0.75rem;
$border-radius-2xl: 1rem;
$border-radius-3xl: 1.5rem;
$border-radius-full: 9999px;

// Border widths
$border-width-0: 0;
$border-width-1: 1px;
$border-width-2: 2px;
$border-width-4: 4px;
$border-width-8: 8px;
```

### Size Utility Classes
```scss
// Width utilities with shorter names
.w-auto { width: $width-auto; }
.w-full { width: $width-full; }
.w-screen { width: $width-screen; }
.w-sm { width: $width-4; }
.w-md { width: $width-8; }
.w-lg { width: $width-16; }
.w-xl { width: $width-32; }

// Height utilities with shorter names
.h-auto { height: auto; }
.h-full { height: 100%; }
.h-screen { height: 100vh; }
.h-sm { height: $width-4; }
.h-md { height: $width-8; }
.h-lg { height: $width-16; }
.h-xl { height: $width-32; }

// Container max widths
.container-sm { max-width: $container-sm; }
.container-md { max-width: $container-md; }
.container-lg { max-width: $container-lg; }
.container-xl { max-width: $container-xl; }
.container-max { max-width: $container-2xl; }

// Border radius with shorter names
.rounded-none { border-radius: $border-radius-none; }
.rounded-sm { border-radius: $border-radius-sm; }
.rounded { border-radius: $border-radius-base; }
.rounded-md { border-radius: $border-radius-md; }
.rounded-lg { border-radius: $border-radius-lg; }
.rounded-xl { border-radius: $border-radius-xl; }
.rounded-2xl { border-radius: $border-radius-2xl; }
.rounded-full { border-radius: $border-radius-full; }

// Border widths with shorter names
.border-none { border-width: $border-width-0; }
.border-thin { border-width: $border-width-1; }
.border { border-width: $border-width-2; }
.border-thick { border-width: $border-width-4; }
.border-xl { border-width: $border-width-8; }
```

## Shadow & Effects Analysis
- Extract box-shadow values
- Identify text shadows
- Note opacity and blur effects

### Shadow Variables
```scss
// Box shadows
$shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
$shadow-base: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
$shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
$shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
$shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
$shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
$shadow-inner: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
$shadow-none: none;

// Opacity values
$opacity-0: 0;
$opacity-5: 0.05;
$opacity-10: 0.1;
$opacity-20: 0.2;
$opacity-25: 0.25;
$opacity-30: 0.3;
$opacity-40: 0.4;
$opacity-50: 0.5;
$opacity-60: 0.6;
$opacity-70: 0.7;
$opacity-75: 0.75;
$opacity-80: 0.8;
$opacity-90: 0.9;
$opacity-95: 0.95;
$opacity-100: 1;
```

### Shadow Utility Classes
```scss
// Box shadow utilities with shorter names
.shadow-sm { box-shadow: $shadow-sm; }
.shadow { box-shadow: $shadow-base; }
.shadow-md { box-shadow: $shadow-md; }
.shadow-lg { box-shadow: $shadow-lg; }
.shadow-xl { box-shadow: $shadow-xl; }
.shadow-2xl { box-shadow: $shadow-2xl; }
.shadow-inner { box-shadow: $shadow-inner; }
.shadow-none { box-shadow: $shadow-none; }

// Opacity utilities with shorter names
.opacity-0 { opacity: $opacity-0; }
.opacity-10 { opacity: $opacity-10; }
.opacity-25 { opacity: $opacity-25; }
.opacity-50 { opacity: $opacity-50; }
.opacity-75 { opacity: $opacity-75; }
.opacity-100 { opacity: $opacity-100; }
```

## Layout Analysis
- Identify flexbox/grid patterns
- Extract z-index values
- Note positioning types

### Layout Variables
```scss
// Z-index scale
$z-index-0: 0;
$z-index-10: 10;
$z-index-20: 20;
$z-index-30: 30;
$z-index-40: 40;
$z-index-50: 50;
$z-index-auto: auto;

// Flex values
$flex-1: 1 1 0%;
$flex-auto: 1 1 auto;
$flex-initial: 0 1 auto;
$flex-none: none;
```

### Layout Utility Classes
```scss
// Display utilities with shorter names
.block { display: block; }
.inline-block { display: inline-block; }
.inline { display: inline; }
.flex { display: flex; }
.inline-flex { display: inline-flex; }
.grid { display: grid; }
.hidden { display: none; }

// Position utilities
.static { position: static; }
.fixed { position: fixed; }
.absolute { position: absolute; }
.relative { position: relative; }
.sticky { position: sticky; }

// Z-index utilities with shorter names
.z-0 { z-index: $z-index-0; }
.z-10 { z-index: $z-index-10; }
.z-20 { z-index: $z-index-20; }
.z-30 { z-index: $z-index-30; }
.z-40 { z-index: $z-index-40; }
.z-50 { z-index: $z-index-50; }
.z-auto { z-index: $z-index-auto; }

// Flexbox utilities with shorter names
.flex-1 { flex: $flex-1; }
.flex-auto { flex: $flex-auto; }
.flex-initial { flex: $flex-initial; }
.flex-none { flex: $flex-none; }

// Flex direction with shorter names
.flex-row { flex-direction: row; }
.flex-row-reverse { flex-direction: row-reverse; }
.flex-col { flex-direction: column; }
.flex-col-reverse { flex-direction: column-reverse; }

// Justify content with shorter names
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }

// Align items with shorter names
.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }
```

## File Organization
Generate the following file structure:
```
src/styles/
├── abstracts/
│   ├── _variables.scss      // All design tokens
│   ├── _functions.scss      // SCSS functions
│   └── _mixins.scss        // SCSS mixins
├── base/
│   ├── _reset.scss         // CSS reset
│   └── _typography.scss    // Base typography
├── utilities/
│   ├── _colors.scss        // Color utilities
│   ├── _typography.scss    // Typography utilities
│   ├── _spacing.scss       // Spacing utilities
│   ├── _sizing.scss        // Size utilities
│   ├── _layout.scss        // Layout utilities
│   └── _effects.scss       // Shadow/effect utilities
└── main.scss              // Main import file
```

## Analysis Guidelines
1. **Be Precise**: Measure exact pixel values and convert to rem/em appropriately
2. **Use Concise but Meaningful Names**: Balance brevity with clarity (e.g., `.m-md` instead of `.margin-medium`)
3. **Create Intuitive Names**: Use descriptive names like `.bg-primary` instead of `.bg-primary-500`
4. **Include Variants**: Generate hover, focus, and active states when applicable
5. **Consider Accessibility**: Ensure color contrast ratios meet WCAG guidelines
6. **Be Systematic**: Create complete scales rather than arbitrary values
7. **Add Documentation**: Include comments explaining color purposes and usage
8. **Generate Concise CSS**: Focus on short but meaningful class names that describe purpose
9. **Use Standard Abbreviations**: `.m-` for margin, `.p-` for padding, `.bg-` for background, `.text-` for typography
10. **Prioritize Readability**: Choose class names that are short but still understandable

## CSS Custom Properties (CSS Variables)
Also generate CSS custom properties for runtime manipulation:

```css
:root {
  /* Colors */
  --color-primary: #3b82f6;
  --color-secondary: #64748b;
  --color-accent: #f59e0b;
  
  /* Typography */
  --font-primary: 'Inter', sans-serif;
  --font-size-base: 1rem;
  --line-height-normal: 1.5;
  
  /* Spacing */
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  
  /* Breakpoints */
  --breakpoint-sm: 640px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 1024px;
}
```

Always provide a comprehensive analysis with explanations for design decisions and suggestions for implementation best practices.

Generated by Copilot
